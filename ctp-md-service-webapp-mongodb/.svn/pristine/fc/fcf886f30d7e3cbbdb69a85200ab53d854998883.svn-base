package com.ctp.data.service;

import java.util.List;

import com.ctp.dao.MarketDataDao;
import com.ctp.dao.OHLCDataDao;
import com.ctp.data.entity.MarketData;
import com.ctp.data.entity.OHLCData30MS;
import com.ctp.data.entity.OHLCDataItem;
import com.ctp.util.TimeDateUtils;
import com.tictactec.ta.lib.Core;
import com.tictactec.ta.lib.MInteger;
import com.tictactec.ta.lib.RetCode;

public class OHLCDataServiceImpl implements OHLCDataService{

	private OHLCDataDao oHLCDataDao;
	private MarketDataDao marketDataDao;
	private Core core = new Core();
	
	@Override
	public void addOHLCData30MS(MarketData data) {
		OHLCData30MS ohlcData = (OHLCData30MS) this.getLastOHLCData30MS(data.getInstrumentID(), data.getId(), 30000);
		this.oHLCDataDao.save(ohlcData);
	}

	@Override
	public OHLCDataItem getLastOHLCData30MS(String instrumentId,long now,int timePeriod) {
		long[] tp = TimeDateUtils.timePeriod(now, timePeriod);
		List<MarketData> ls = marketDataDao.getList(instrumentId, tp[0], tp[1]);
		if(ls!=null && ls.size()>0){
			OHLCData30MS item = new OHLCData30MS();
			int len = ls.size();
			double [] prices = new double[len];
			MInteger outBegIdx = new MInteger();
			MInteger outNBElement = new MInteger();
			
			//最高价
			double[] highestPriceOutReal = new double[1];
			
			//最低价
			double[] lowestPriceOutReal = new double[1];
			item.setId(tp[1]);
			item.setOpenPrice(prices[0]);
			item.setClosePrice(prices[prices.length-1]);
			item.setVolume(Double.valueOf(ls.get(len-1).getVolume()-ls.get(0).getVolume()));
			//最高价
			RetCode rc= core.max(0, len-1, prices, len, outBegIdx, outNBElement, highestPriceOutReal);
			if(RetCode.Success==rc){
				item.setHighPrice(highestPriceOutReal[0]);
			}else{
				System.out.println(rc);
				return null;
			}
			//最低价
			RetCode lowestRc= core.min(0, len-1, prices, len, outBegIdx, outNBElement, lowestPriceOutReal);
			if(RetCode.Success == lowestRc){
				item.setLowPrice(lowestPriceOutReal[0]);
			}else{
				System.out.println(lowestRc);
				return null;
			}
			return item;
		}
		System.out.println("no data");
		return null;
	}
	
	public <T extends OHLCDataItem>T getLastOHCLData(Class<T> clazz,String instrumentId,long now) {
		T item = null;
		try {
			item = clazz.newInstance();
		} catch (InstantiationException | IllegalAccessException e) {
			e.printStackTrace();
		}
		long[] tp = item.timePeriod(now);
		List<? extends OHLCDataItem> ls = this.oHLCDataDao.getList(item.getSubClass(), instrumentId, tp[0], tp[1]);
		if(ls!=null && ls.size()>0){
			int len = ls.size();
			double [] prices = new double[len];
			MInteger outBegIdx = new MInteger();
			MInteger outNBElement = new MInteger();
			
			//最高价
			double[] highestPriceOutReal = new double[1];
			
			//最低价
			double[] lowestPriceOutReal = new double[1];
			item.setId(tp[1]);
			item.setOpenPrice(prices[0]);
			item.setClosePrice(prices[prices.length-1]);
			item.setVolume(Double.valueOf(ls.get(len-1).getVolume()-ls.get(0).getVolume()));
			//最高价
			RetCode rc= core.max(0, len-1, prices, len, outBegIdx, outNBElement, highestPriceOutReal);
			if(RetCode.Success==rc){
				item.setHighPrice(highestPriceOutReal[0]);
			}else{
				System.out.println(rc);
				return null;
			}
			//最低价
			RetCode lowestRc= core.min(0, len-1, prices, len, outBegIdx, outNBElement, lowestPriceOutReal);
			if(RetCode.Success == lowestRc){
				item.setLowPrice(lowestPriceOutReal[0]);
			}else{
				System.out.println(lowestRc);
				return null;
			}
			return item;
		}
		System.out.println("no data");
		return null;
	}
	
	@Override
	public <T extends OHLCDataItem> void  add(Class<T> clazz,String instrumentId,long now) {
		OHLCDataItem item= this.getLastOHCLData(clazz,instrumentId,now);
		this.oHLCDataDao.save(item);
	}
	
	
	

}
