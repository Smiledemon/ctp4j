package com.ctp.dao;

import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.springframework.data.redis.core.RedisTemplate;

import com.ctp.data.MarketData;
import com.itqy8.commons.json.JacksonUtils;

public class MarketDataDaoImpl implements MarketDataDao{

	private RedisTemplate<String, MarketData> redisTemplate;
	private static final String MARKET_DATA_KEY = "market_data_list_";
	private String getId(MarketData marketData){
		return marketData.getInstrumentID()+":"+marketData.getTradingDateTime();
	}
	
	public Set<Object> getKeys(){
		return this.redisTemplate.opsForHash().keys("MarketData");
	}
	
	@Override
	public void save(MarketData marketData) {
		// 向redis插入的时候为了方便根据时间进行区间查询key设计为如下规则
		//key:合约代码 + : 行情 ticket时间戳
		redisTemplate.opsForHash().put("MarketData", getId(marketData), JacksonUtils.jsonFromObject(marketData));
	}
	
	@Override
	public List<Object> multiGet(Collection<Object> ids) {
		List<Object> ls = this.redisTemplate.boundHashOps("MarketData").multiGet(ids);
		return ls;
	}

	@Override
	public MarketData get(String id) {
		String json = (String)redisTemplate.boundHashOps("MarketData").get(id);
		MarketData entity = JacksonUtils.jsonToObject(json, MarketData.class);
        return entity;
	}

	public void setRedisTemplate(RedisTemplate<String, MarketData> redisTemplate) {
		this.redisTemplate = redisTemplate;
	}
/*
	@Override
	public List<Double> getLastPrice(Collection<Object> ids) {
		List<Object> ls = this.redisTemplate.boundHashOps("MarketData").multiGet(ids);
		int size = ls.size();
		//最新价
		List<Double> priceLs = new ArrayList<Double>();
		
		for(int i=0;i<size;i++){
			String json = (String)ls.get(i);
			if(json!=null){
				MarketData md = JacksonUtils.jsonToObject(json, MarketData.class);
				if(md!=null){
					priceLs.add(md.getLastPrice());
				}
			}
		}
		return priceLs;
	}
*/

	@Override
	public void addZset(MarketData marketData) {
		this.redisTemplate.opsForZSet().add(MARKET_DATA_KEY+marketData.getInstrumentID(), marketData, marketData.getTradingDateTime());
	}

	@Override
	public Set<MarketData> getList(String instrumentId,long start, long end) {
		Set<MarketData> set = this.redisTemplate.opsForZSet().rangeByScore(MARKET_DATA_KEY+instrumentId, start, end);
		return set;
	}

	
	@Override
	public Set<MarketData> getList(String instrumentId,long start, long end,int count) {
		Set<MarketData> set = this.redisTemplate.opsForZSet().rangeByScore(MARKET_DATA_KEY+instrumentId, start, end, 0, count);
		return set;
	}
	
	
	
}
