package com.itqy8.ctp.md.service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.ctp.dao.MarketDataDao;
import com.ctp.data.entity.MarketData;
import com.ctp.data.entity.OHLCData1Day;
import com.ctp.data.entity.OHLCData1Hour;
import com.ctp.data.entity.OHLCData1Minute;
import com.ctp.data.entity.OHLCData1Month;
import com.ctp.data.service.OHLCDataService;
import com.itqy8.ctp.CThostFtdcDepthMarketDataField;
import com.itqy8.framework.response.VoidResponse;

public class MarketServiceImpl implements MarketService{

	private MarketDataDao marketDataDao;
	private OHLCDataService oHLCDataService;
	@Override
	public VoidResponse add(CThostFtdcDepthMarketDataField pDepthMarketData) {
		MarketData md = new MarketData();
        md.setAskPrice1(pDepthMarketData.getAskPrice1());
        md.setAskPrice2(pDepthMarketData.getAskPrice2());
        md.setAskPrice3(pDepthMarketData.getAskPrice3());
        md.setAskPrice4(pDepthMarketData.getAskPrice4());
        md.setAskPrice5(pDepthMarketData.getAskPrice5());
        
        md.setAskVolume1(pDepthMarketData.getAskVolume1());
        md.setAskVolume2(pDepthMarketData.getAskVolume2());
        md.setAskVolume3(pDepthMarketData.getAskVolume3());
        md.setAskVolume4(pDepthMarketData.getAskVolume4());
        md.setAskVolume5(pDepthMarketData.getAskVolume5());
        
        md.setBidPrice1(pDepthMarketData.getBidPrice1());
        md.setBidPrice2(pDepthMarketData.getBidPrice2());
        md.setBidPrice3(pDepthMarketData.getBidPrice3());
        md.setBidPrice4(pDepthMarketData.getBidPrice4());
        md.setBidPrice5(pDepthMarketData.getBidPrice5());
        
        md.setBidVolume1(pDepthMarketData.getBidVolume1());
        md.setBidVolume2(pDepthMarketData.getBidVolume2());
        md.setBidVolume3(pDepthMarketData.getBidVolume3());
        md.setBidVolume4(pDepthMarketData.getBidVolume4());
        md.setBidVolume5(pDepthMarketData.getBidVolume5());
        
        md.setCurrDelta(pDepthMarketData.getCurrDelta());
        md.setClosePrice(pDepthMarketData.getClosePrice());
        md.setExchangeID(pDepthMarketData.getExchangeID());
        md.setExchangeInstID(pDepthMarketData.getExchangeInstID());
        md.setHighestPrice(pDepthMarketData.getHighestPrice());
        md.setInstrumentID(pDepthMarketData.getInstrumentID());
        md.setLastPrice(pDepthMarketData.getLastPrice());
        md.setLowerLimitPrice(pDepthMarketData.getLowerLimitPrice());
        md.setLowestPrice(pDepthMarketData.getLowestPrice());
        md.setOpenInterest(pDepthMarketData.getOpenInterest());
        md.setOpenPrice(pDepthMarketData.getOpenPrice());
        md.setPreClosePrice(pDepthMarketData.getPreClosePrice());
        md.setPreDelta(pDepthMarketData.getPreDelta());
        md.setPreOpenInterest(pDepthMarketData.getPreOpenInterest());
        md.setPreSettlementPrice(pDepthMarketData.getPreSettlementPrice());
        md.setTradingDay(pDepthMarketData.getTradingDay());
        md.setTurnover(pDepthMarketData.getTurnover());
        md.setUpdateMillisec(pDepthMarketData.getUpdateMillisec());
        md.setUpdateTime(pDepthMarketData.getUpdateTime());
        md.setVolume(pDepthMarketData.getVolume());
        md.setUpperLimitPrice(pDepthMarketData.getUpperLimitPrice());
        md.setAveragePrice(pDepthMarketData.getAveragePrice());
        md.setActionDay(pDepthMarketData.getActionDay());
        String dateStr = md.getTradingDay() + " " + md.getUpdateTime() +":"+ md.getUpdateMillisec();
		try {
			Date date = new SimpleDateFormat("yyyyMMdd HH:mm:ss:SSS").parse(dateStr);
			md.setId(date.getTime());
			this.marketDataDao.save(md);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		//30s
		this.oHLCDataService.addOHLCData30MS(md);
		//1m
		this.oHLCDataService.add(OHLCData1Minute.class, md.getInstrumentID(), md.getId());
		this.oHLCDataService.add(OHLCData1Hour.class, md.getInstrumentID(), md.getId());
		this.oHLCDataService.add(OHLCData1Day.class, md.getInstrumentID(), md.getId());
		this.oHLCDataService.add(OHLCData1Month.class, md.getInstrumentID(), md.getId());
		return null;
	}

	public void setMarketDataDao(MarketDataDao marketDataDao) {
		this.marketDataDao = marketDataDao;
	}

}
