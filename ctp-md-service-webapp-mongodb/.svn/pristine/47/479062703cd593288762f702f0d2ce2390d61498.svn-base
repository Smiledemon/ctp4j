package com.itqy8.framework.startup;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Properties;

import org.apache.log4j.PropertyConfigurator;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.data.mongodb.core.MongoTemplate;

import com.ctp.dao.MarketDataDao;
import com.ctp.dao.OHLCDataDao;
import com.ctp.data.entity.MarketData;
import com.ctp.data.entity.OHLCData1Day;
import com.ctp.data.entity.OHLCData1Hour;
import com.ctp.data.entity.OHLCData1Minute;
import com.google.common.util.concurrent.AbstractIdleService;
import com.itqy8.ctp.trader.dto.OrderDTO;
import com.itqy8.ctp.trader.service.TraderService;
import com.itqy8.framework.util.SpringUtil;

public class BootstrapTest extends AbstractIdleService {

	
	private ClassPathXmlApplicationContext context;
	public static void main(String[] args) {
		try {
			InputStream input = BootstrapTest.class.getClassLoader().getResourceAsStream("config/log4j.properties");
			Properties prop = new Properties();
			prop.load(input);
			PropertyConfigurator.configure(prop);
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("ERROR: Unable to load config/log4j.properties");
		}
		BootstrapTest bootstrap = new BootstrapTest();
		bootstrap.startAsync();
		try {
			Object lock = new Object();
			synchronized (lock) {
				while (true) {
					lock.wait();
				}
			}
		} catch (InterruptedException ex) {
			System.err.println("ignoreinterruption");
		}
	}

	@Override
	protected void shutDown() throws Exception {
		context.stop();
		System.out.println("-------------service stopped successfully-------------");
	}
	@Override
	protected void startUp() throws Exception {
		context = new ClassPathXmlApplicationContext("classpath:config/spring/*.xml");
		context.start();
		//
		context.registerShutdownHook();
		MongoTemplate mongoTemplate = (MongoTemplate) SpringUtil.getBean("mongoTemplate");
		MarketDataDao marketDataDao = (MarketDataDao) SpringUtil.getBean("marketDataDao");
		OHLCDataDao oHLCDataDao = (OHLCDataDao) SpringUtil.getBean("oHLCDataDao");
		List<MarketData> ls = marketDataDao.getList("rb1610", 0, System.currentTimeMillis(), 10000000);
		/*for(MarketData md:ls){
			System.out.println(md.getId());
		}*/
		System.out.println(ls.size());
		List<OHLCData1Minute> ols = oHLCDataDao.getList(OHLCData1Minute.class, "rb1610", 0, System.currentTimeMillis(), 10000000);
		System.out.println(ols.size());
		/*for(OHLCData1Minute om:ols){
			System.out.println(om.getId());
		}*/
		List<OHLCData1Hour> ols2 = oHLCDataDao.getList(OHLCData1Hour.class, "rb1610", 0, System.currentTimeMillis(), 10000000);
		System.out.println(ols2.size());
		List<OHLCData1Day> ols3 = oHLCDataDao.getList(OHLCData1Day.class, "rb1610", 0, System.currentTimeMillis(), 10000000);
		System.out.println(ols3.size());
		
		TraderService traderService = (TraderService) SpringUtil.getBean("traderService");
		OrderDTO order = new OrderDTO();
		order.setBrokerID("9999");
		order.setInvestorID("057794");
		order.setInstrumentID("cu1606");
		order.setOrderRef("1");
		order.setUserID("057794");
		
		order.setVolumeCondition('1');//成交量类型：任何数量
		order.setMinVolume(1);/// 最小成交量：1
		order.setForceCloseReason('0');/// 强平原因：非强平
		order.setIsAutoSuspend(0);/// 自动挂起标志：否
		order.setUserForceClose(0);///用户强评标志：否
		order.setDirection('0');
		
		order.setOrderPriceType('2');
		order.setTimeCondition('3');
		order.setLimitPrice(3711);
		order.setStopPrice(3700);
		order.setCombOffsetFlag("0");
		order.setCombHedgeFlag("1");
		order.setVolumeTotalOriginal(1);
		order.setTimeCondition('3');
		order.setContingentCondition('1');
		order.setRequestID(1);
		traderService.orderInsert(order);
		/*//本期已经过去的毫秒数
		int timePeriod=3000000;
		long time = 1464233415500L;
		long passMillis = time%timePeriod;
		long start = time-passMillis;
		
		System.out.println("current:"+new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date(time)));
		System.out.println("start:"+new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date(start)));
		System.out.println("passMillis:"+passMillis);
		long end = start+timePeriod;
		Collection<Object> idls = new ArrayList<Object>();
		for(long i=start;i<end;i=i+500){
			idls.add("bu1606:"+i);
		}*/
		
		/*MarketDataDao marketDataDao = (MarketDataDao) SpringUtil.getBean("marketDataDao");
		MarketData md1 = new MarketData();
		md1.setInstrumentID("rb1610");
		md1.setTradingDateTime(5l);
		MarketData md2 = new MarketData();
		md2.setInstrumentID("rb1610");
		md2.setTradingDateTime(3l);
		MarketData md3 = new MarketData();
		md3.setInstrumentID("rb1610");
		md3.setTradingDateTime(6L);
		MarketData md4 = new MarketData();
		md4.setInstrumentID("rb1610");
		md4.setTradingDateTime(2l);
		marketDataDao.addZset(md1);
		marketDataDao.addZset(md2);
		marketDataDao.addZset(md3);
		marketDataDao.addZset(md4);
		
		Set<MarketData> setls = marketDataDao.getList("rb1610", 0, 10);
		for(MarketData m:setls){
			System.out.println(m.getTradingDateTime());
		}*/
		/*JedisConnectionFactory cc = (JedisConnectionFactory) SpringUtil.getBean("jedisConnectionFactory");
		cc.getConnection().flushDb();*/
		/*long zstart = System.currentTimeMillis();
		for(int i=0;i<10000;i++){
			redisTemplate.opsForZSet().add("zsetTest",new MarketData(), i);
		}
		
		System.out.println("向zset中插入1万条数据耗时："+ (System.currentTimeMillis()-zstart));*/
		
		/*long hstart = System.currentTimeMillis();
		
		for(int i=0;i<10000;i++){
			redisTemplate.opsForHash().put("hashTest1", i, i);
		}
		
		System.out.println("向hash中插入1万条数据耗时："+ (System.currentTimeMillis()-hstart));*/
		
		/*long hqstart = System.currentTimeMillis();
		Collection<Object> hashKeys = new ArrayList<Object>();
		for(int i=0;i<10000;i++){
			hashKeys.add(i);
		}
		List<Object> ls = redisTemplate.opsForHash().multiGet("hashTest", hashKeys);
		for(Object o:ls){
			MarketData md = JacksonUtils.jsonToObject((String)o, MarketData.class);
		}
		System.out.println("查询hash 1万条数据耗时："+ (System.currentTimeMillis()-hqstart));
		System.out.println(ls.size());
		
		long zsqstart = System.currentTimeMillis();
		
		Set<TypedTuple<MarketData>> set  = redisTemplate.opsForZSet().rangeByScoreWithScores("zsetTest", 0, 100000);
		
		System.out.println("查询zset 1万条数据耗时："+ (System.currentTimeMillis()-zsqstart));
		
		
		System.out.println(set.size());
		*/
		
		System.out.println("----------------provider service started successfully------------");
	}

}
