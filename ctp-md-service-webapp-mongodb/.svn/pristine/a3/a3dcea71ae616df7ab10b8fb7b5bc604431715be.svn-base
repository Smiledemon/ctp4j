<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<context:component-scan base-package="com.itqy8.framework.util" />
	<bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db_driverClassName}" />
        <property name="url" value="${db_url}" />
        <property name="username" value="${db_username}" />
        <property name="password" value="${db_password}" />
        <!--initialSize: 初始化连接-->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!--minIdle: 最小空闲连接-->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!--maxActive: 最大连接数量-->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!--removeAbandoned: 是否自动回收超时连接-->
        <property name="removeAbandoned" value="true"/>
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
        <!--maxWait: 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒-->
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <property name="defaultAutoCommit">
            <value>false</value>
        </property>
        <property name="validationQuery" value="select 1"/>
        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />
    </bean>
	<!-- 配置sessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="druidDataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<!-- <prop key="hibernate.query.factory_class">org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory</prop> -->
				<prop key="hibernate.connection.autoReconnect">true</prop>
				<prop key="hibernate.connection.autoReconnectForPools">true</prop> 
				<prop key="hibernate.connection.is-connection-validation-required">true</prop> 

				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>

				<!-- 开启查询缓存 -->
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<!-- 开启二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<!-- Hibernate将收集有助于性能调节的统计数据 -->
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<!-- 强制Hibernate以更人性化的格式将数据存入二级缓存 -->
				<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
				<!-- 高速缓存提供程序 -->
				<!-- 由于spring也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
				<prop key="diskStoreLocation">${diskStoreLocation}</prop>
			</props>
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath*:com/itqy8/ctp/md/entity/hbm/*.hbm.xml</value>
			</list>
		</property>
		<!-- <property name="mappingJarLocations">
			<list>
				<value>/WEB-INF/lib/user-commons-*.jar</value>
			</list>
		</property> -->
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 开启注解事务 -->
	<!-- 使用cglib动态代理 -->
	<!-- 声明事务和注解事务同时开启，注解事务优先级设置最高 -->
	<tx:annotation-driven transaction-manager="transactionManager" order="0"/>
	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="isExist*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 那些类的哪些方法参与事务 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="baseServiceMethod" expression="execution(* com.itqy8.ctp.md.service..*.*(..))" />
		<aop:advisor pointcut-ref="baseServiceMethod" advice-ref="txAdvice" order="1"/>
	</aop:config>
	<aop:config proxy-target-class="true">
		<aop:pointcut id="securityServiceMethod" expression="execution(* com.itqy8.security.service..*.*(..))" />
		<aop:advisor pointcut-ref="securityServiceMethod" advice-ref="txAdvice" order="1"/>
	</aop:config>
	<bean id="openSessionInterceptor" class="org.springframework.orm.hibernate4.support.OpenSessionInterceptor">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	 <aop:config>
		<aop:advisor advice-ref="openSessionInterceptor" pointcut-ref="baseServiceMethod" order="2"/>
	</aop:config>
</beans>