package com.ctp.data.service;

import java.util.Set;

import com.ctp.dao.OHLCDataDao;
import com.ctp.data.OHLCDataItem;
import com.ctp.util.TimeDateUtils;
import com.itqy8.ctp.enums.TimeUnits;
import com.tictactec.ta.lib.Core;
import com.tictactec.ta.lib.MInteger;
import com.tictactec.ta.lib.RetCode;

public class OHLCDataServiceImpl implements OHLCDataService {
	
	private Core core = new Core();
	private OHLCDataDao oHLCDataDao;

	private MarketDataService marketDataService;
	
	@Override
	public void addOHLCDataItem(String instrumentId,long now, TimeUnits timeUnit, TimeUnits subTimeUnit) {
		OHLCDataItem  item= this.getOHLCData(instrumentId, now,timeUnit,subTimeUnit);

		if(item!=null){
			// 向redis插入的时候为了方便根据时间进行区间查询key设计为如下规则
			//key:合约代码 + : 行情 ticket时间戳
			this.oHLCDataDao.addToZSet(instrumentId,timeUnit, item);//(getKey(instrumentId,timeUnit), this.getId(instrumentId,item.getPriceTime()),item);
		}
		
	}

	@Override
	public void addMiniUnitOHLCDataItem(String instrumentId,long now) {
		OHLCDataItem item  = this.marketDataService.getLastOHCLData(instrumentId,now, TimeUnits.TIME_30S);
		if(item!=null){
			this.oHLCDataDao.addToZSet(instrumentId,TimeUnits.TIME_30S, item);
		}
		
		
	}
	
	@Override
	public Set<OHLCDataItem> getOHLCDataList(String instrumentId,long now, TimeUnits timeUnit, int count) {
		long[] timePeriod = TimeDateUtils.timePeriod(now,timeUnit.getTimeMillis());
		return this.oHLCDataDao.getList(instrumentId,timeUnit, timePeriod[0], timePeriod[1]);
	}

	@Override
	public OHLCDataItem getOHLCData(String instrumentId,long now, TimeUnits timeUnit,TimeUnits subTimeUnit) {
		OHLCDataItem data = new OHLCDataItem();
		// 本期已经过去的毫秒数
		long[] timePeriod = TimeDateUtils.timePeriod(now,timeUnit.getTimeMillis());
		long start = timePeriod[0];
		long end = timePeriod[1];

		// 根据合约代码和时间区间获取价格最高的和最低的
		Set<OHLCDataItem> mdls = this.oHLCDataDao.getList(instrumentId, subTimeUnit,start, end);
		if(mdls==null || mdls.size()==0){
			return null;
		}
		int len = mdls.size();
		double[] o = new double[len];
		double[] h = new double[len];
		double[] l = new double[len];
		double[] c = new double[len];
		double[] v = new double[len];
		int i=0;
		for (OHLCDataItem item:mdls) {
			o[i] = item.getOpenPrice();
			h[i] = item.getHighPrice();
			l[i] = item.getLowPrice();
			c[i] = item.getClosePrice();
			v[i] = item.getVolume();
			i++;
		}
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();

		// 最高价
		double[] highestPriceOutReal = new double[1];
		RetCode rc = core.max(0, h.length - 1, h, h.length, outBegIdx, outNBElement, highestPriceOutReal);
		if (RetCode.Success == rc) {
			data.setHighPrice(highestPriceOutReal[0]);
		}else{
			return null;
		}
		// 最低价
		double[] lowestPriceOutReal = new double[1];
		RetCode lowestRc = core.min(0, l.length - 1, l, l.length, outBegIdx, outNBElement, lowestPriceOutReal);
		if (RetCode.Success == lowestRc) {
			data.setLowPrice(lowestPriceOutReal[0]);
		}else{
			return null;
		}
		data.setPriceTime(end);
		// 开盘价
		data.setOpenPrice(o[0]);
		// 关盘价
		data.setClosePrice(c[c.length - 1]);
		// 总手数
		double[] totalVolume = new double[1];
		RetCode totalVolumeRc = core.sum(0, v.length - 1, v, v.length, outBegIdx, outNBElement, totalVolume);
		if (RetCode.Success == totalVolumeRc) {
			data.setVolume(totalVolume[0]);
		}else{
			return null;
		}
		return data;
	}

	@Override
	public Set<OHLCDataItem> getOHLCDataList(String instrumentId, long now, TimeUnits timeUnit) {
		long[] timePeriod = TimeDateUtils.timePeriod(now,timeUnit.getTimeMillis());
		return this.oHLCDataDao.getList(instrumentId,timeUnit, timePeriod[0], timePeriod[1]);
	}
	
	public void setoHLCDataDao(OHLCDataDao oHLCDataDao) {
		this.oHLCDataDao = oHLCDataDao;
	}

	public void setMarketDataService(MarketDataService marketDataService) {
		this.marketDataService = marketDataService;
	}

	

}
