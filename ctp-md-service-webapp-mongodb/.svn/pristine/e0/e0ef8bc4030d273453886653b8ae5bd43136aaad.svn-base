package com.ctp.data.service;

import java.util.Set;

import com.ctp.dao.MarketDataDao;
import com.ctp.data.MarketData;
import com.ctp.data.OHLCDataItem;
import com.ctp.util.TimeDateUtils;
import com.itqy8.ctp.enums.TimeUnits;
import com.tictactec.ta.lib.Core;
import com.tictactec.ta.lib.MInteger;
import com.tictactec.ta.lib.RetCode;

public class MarketDataServiceImpl implements MarketDataService{

	private MarketDataDao marketDataDao;
	private Core core = new Core();
//	private static final String key = "MarketData";
	public void setMarketDataDao(MarketDataDao marketDataDao) {
		this.marketDataDao = marketDataDao;
	}
	
	@Override
	public Set<MarketData> getLastMarketData(String instrumentId,long now, TimeUnits timeUnits) {
		long[] timePeriod = TimeDateUtils.timePeriod(now,timeUnits.getTimeMillis());
		Set<MarketData> ls = this.marketDataDao.getList(instrumentId,timePeriod[0], timePeriod[1]);
		return ls;
	}


	@Override
	public OHLCDataItem getLastOHCLData(String instrumentId,long now, TimeUnits timeUnits) {
		
		long[] timePeriod = TimeDateUtils.timePeriod(now,timeUnits.getTimeMillis());
		Set<MarketData> ls = this.getLastMarketData(instrumentId,now, timeUnits);
		if(ls!=null && ls.size()>0){
			OHLCDataItem item = new OHLCDataItem();
			int len = ls.size();
			double [] prices = new double[len];
			int i=0;
			MarketData first = null;
			MarketData last = null;
			for(MarketData md:ls){
				prices[i]=md.getLastPrice();
				if(i==0){
					first = md;
				}
				if(i==len-1){
					last = md;
				}
				i++;
			}
			MInteger outBegIdx = new MInteger();
			MInteger outNBElement = new MInteger();
			
			//最高价
			double[] highestPriceOutReal = new double[1];
			
			//最低价
			double[] lowestPriceOutReal = new double[1];
//			dto.setLastPrice(inReal[inReal.length-1]);
			item.setOpenPrice(prices[0]);
			item.setClosePrice(prices[prices.length-1]);
			item.setPriceTime(timePeriod[1]);
			item.setVolume(Double.valueOf(last.getVolume()-first.getVolume()));
			//最高价
			RetCode rc= core.max(0, len-1, prices, len, outBegIdx, outNBElement, highestPriceOutReal);
			if(RetCode.Success==rc){
				item.setHighPrice(highestPriceOutReal[0]);
			}else{
				System.out.println(rc);
				return null;
			}
			//最低价
			RetCode lowestRc= core.min(0, len-1, prices, len, outBegIdx, outNBElement, lowestPriceOutReal);
			if(RetCode.Success == lowestRc){
				item.setLowPrice(lowestPriceOutReal[0]);
			}else{
				System.out.println(lowestRc);
				return null;
			}
			return item;
		}
		System.out.println("no data");
		return null;
	}
	

	@Override
	public Set<MarketData> getMarketDataList(String instrumentId, long start, long end) {
		/*Collection<Object> idls = new ArrayList<Object>();
		for (long i = start; i <= end; i = i + 500) {
			idls.add(this.getId(instrumentId, i));
		}*/
//		List<Object> ls = marketDataDao.multiGet(idls);
//		List<MarketData> rtls = new ArrayList<MarketData>();
		Set<MarketData> ls = marketDataDao.getList(instrumentId,start, end);
		/*for (Object o : ls) {
			if (o != null) {
				rtls.add(JacksonUtils.jsonToObject((String) o, MarketData.class));
			}
		}*/
		return ls;
	}
	

}
